package main

import "testing"

func TestConflict(t *testing.T) {
	testlists := []struct {
		tests  []Grid
		expect bool
	}{
		{validtests, false},
		{conflictregions, true},
		{emptyregions, false},
		{multiplesolutions, false},
		{puzzles, false},
	}
	for _, l := range testlists {
		for _, tt := range l.tests {
			if c := Conflict(tt); c != l.expect {
				t.Errorf("Conflict %v = %v, want %v", tt, c, l.expect)
			}
		}
	}
}

func BenchmarkPropose(b *testing.B) {
	p := puzzles[len(puzzles)-1] // Arto Inkala
	unknowns = Unknowns(p)
	for i := 0; i < b.N; i++ {
		_ = ProposeSolution(p)
	}
}

func BenchmarkConflict(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_ = Conflict(puzzles[len(puzzles)-1])
	}
}

var validtests = []Grid{
	Grid{ // completed puzzle
		{1, 2, 3, 4, 5, 6, 7, 8, 9},
		{4, 5, 6, 7, 8, 9, 1, 2, 3},
		{7, 8, 9, 1, 2, 3, 4, 5, 6},
		{2, 3, 4, 5, 6, 7, 8, 9, 1},
		{5, 6, 7, 8, 9, 1, 2, 3, 4},
		{8, 9, 1, 2, 3, 4, 5, 6, 7},
		{3, 4, 5, 6, 7, 8, 9, 1, 2},
		{6, 7, 8, 9, 1, 2, 3, 4, 5},
		{9, 1, 2, 3, 4, 5, 6, 7, 8},
	},
	Grid{ // one unknown
		{1, 2, 3, 4, 5, 6, 7, 8, 9},
		{4, 5, 6, 7, 8, 9, 1, 2, 3},
		{7, 8, 9, 1, 2, 3, 4, 5, 6},
		{2, 3, 4, 5, 6, 7, 8, 9, 1},
		{5, 6, 7, 8, 0, 1, 2, 3, 4},
		{8, 9, 1, 2, 3, 4, 5, 6, 7},
		{3, 4, 5, 6, 7, 8, 9, 1, 2},
		{6, 7, 8, 9, 1, 2, 3, 4, 5},
		{9, 1, 2, 3, 4, 5, 6, 7, 8},
	},
	Grid{ // whole row unknown
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{4, 5, 6, 7, 8, 9, 1, 2, 3},
		{7, 8, 9, 1, 2, 3, 4, 5, 6},
		{2, 3, 4, 5, 6, 7, 8, 9, 1},
		{5, 6, 7, 8, 9, 1, 2, 3, 4},
		{8, 9, 1, 2, 3, 4, 5, 6, 7},
		{3, 4, 5, 6, 7, 8, 9, 1, 2},
		{6, 7, 8, 9, 1, 2, 3, 4, 5},
		{9, 1, 2, 3, 4, 5, 6, 7, 8},
	},
	Grid{ // whole column unknown
		{0, 2, 3, 4, 5, 6, 7, 8, 9},
		{0, 5, 6, 7, 8, 9, 1, 2, 3},
		{0, 8, 9, 1, 2, 3, 4, 5, 6},
		{0, 3, 4, 5, 6, 7, 8, 9, 1},
		{0, 6, 7, 8, 9, 1, 2, 3, 4},
		{0, 9, 1, 2, 3, 4, 5, 6, 7},
		{0, 4, 5, 6, 7, 8, 9, 1, 2},
		{0, 7, 8, 9, 1, 2, 3, 4, 5},
		{0, 1, 2, 3, 4, 5, 6, 7, 8},
	},
	Grid{ // whole box unknown
		{0, 0, 0, 4, 5, 6, 7, 8, 9},
		{0, 0, 0, 7, 8, 9, 1, 2, 3},
		{0, 0, 0, 1, 2, 3, 4, 5, 6},
		{2, 3, 4, 5, 6, 7, 8, 9, 1},
		{5, 6, 7, 8, 9, 1, 2, 3, 4},
		{8, 9, 1, 2, 3, 4, 5, 6, 7},
		{3, 4, 5, 6, 7, 8, 9, 1, 2},
		{6, 7, 8, 9, 1, 2, 3, 4, 5},
		{9, 1, 2, 3, 4, 5, 6, 7, 8},
	},
	Grid{ // whole digit unknown
		{1, 2, 3, 4, 5, 6, 7, 8, 0},
		{4, 5, 6, 7, 8, 0, 1, 2, 3},
		{7, 8, 0, 1, 2, 3, 4, 5, 6},
		{2, 3, 4, 5, 6, 7, 8, 0, 1},
		{5, 6, 7, 8, 0, 1, 2, 3, 4},
		{8, 0, 1, 2, 3, 4, 5, 6, 7},
		{3, 4, 5, 6, 7, 8, 0, 1, 2},
		{6, 7, 8, 0, 1, 2, 3, 4, 5},
		{0, 1, 2, 3, 4, 5, 6, 7, 8},
	},
}

var conflictregions = []Grid{
	Grid{ // row conflict
		{1, 2, 3, 4, 5, 6, 7, 8, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	Grid{ // column conflict
		{1, 0, 0, 0, 0, 0, 0, 0, 0},
		{2, 0, 0, 0, 0, 0, 0, 0, 0},
		{3, 0, 0, 0, 0, 0, 0, 0, 0},
		{4, 0, 0, 0, 0, 0, 0, 0, 0},
		{5, 0, 0, 0, 0, 0, 0, 0, 0},
		{6, 0, 0, 0, 0, 0, 0, 0, 0},
		{7, 0, 0, 0, 0, 0, 0, 0, 0},
		{8, 0, 0, 0, 0, 0, 0, 0, 0},
		{1, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	Grid{ // box conflict
		{1, 2, 3, 0, 0, 0, 0, 0, 0},
		{4, 5, 6, 0, 0, 0, 0, 0, 0},
		{7, 8, 1, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
}

var emptyregions = []Grid{
	Grid{ // empty rowcol
		{0, 0, 9, 0, 2, 8, 7, 0, 0},
		{8, 0, 6, 0, 0, 4, 0, 0, 5},
		{0, 0, 3, 0, 0, 0, 0, 0, 4},
		{6, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 2, 0, 7, 1, 3, 4, 5, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 2},
		{3, 0, 0, 0, 0, 0, 5, 0, 0},
		{9, 0, 0, 4, 0, 0, 8, 0, 7},
		{0, 0, 1, 2, 5, 0, 3, 0, 0},
	},
	Grid{ // empty digbox
		{0, 9, 0, 3, 0, 0, 0, 0, 1},
		{0, 0, 0, 0, 8, 0, 0, 4, 6},
		{0, 0, 0, 0, 0, 0, 8, 0, 0},
		{4, 0, 5, 0, 6, 0, 0, 3, 0},
		{0, 0, 3, 2, 7, 5, 6, 0, 0},
		{0, 6, 0, 0, 1, 0, 9, 0, 4},
		{0, 0, 1, 0, 0, 0, 0, 0, 0},
		{5, 8, 0, 0, 2, 0, 0, 0, 0},
		{2, 0, 0, 0, 0, 7, 0, 6, 0},
	},
	Grid{ // empty digcol
		{0, 0, 0, 0, 4, 1, 0, 0, 0},
		{0, 6, 0, 0, 0, 0, 0, 2, 0},
		{0, 0, 2, 0, 0, 0, 0, 0, 0},
		{3, 2, 0, 6, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 5, 0, 0, 4, 1},
		{7, 0, 0, 0, 0, 0, 0, 0, 2},
		{0, 0, 0, 0, 0, 0, 2, 3, 0},
		{0, 4, 8, 0, 0, 0, 0, 0, 0},
		{5, 0, 1, 0, 0, 2, 0, 0, 0},
	},
	Grid{ // empty digrow
		{9, 0, 0, 1, 0, 0, 0, 0, 4},
		{0, 1, 4, 0, 3, 0, 8, 0, 0},
		{0, 0, 3, 0, 0, 0, 0, 9, 0},
		{0, 0, 0, 7, 0, 8, 0, 0, 1},
		{8, 0, 0, 0, 0, 3, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 3, 0},
		{0, 2, 1, 0, 0, 0, 0, 7, 0},
		{0, 0, 9, 0, 4, 0, 5, 0, 0},
		{5, 0, 0, 0, 1, 6, 0, 0, 3},
	},
}

var multiplesolutions = []Grid{
	Grid{ // two solutions
		{1, 2, 3, 4, 5, 6, 7, 8, 9},
		{4, 5, 6, 7, 8, 9, 1, 2, 3},
		{7, 8, 9, 1, 2, 3, 4, 5, 6},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{5, 6, 7, 8, 9, 1, 2, 3, 4},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{3, 4, 5, 6, 7, 8, 9, 1, 2},
		{6, 7, 8, 9, 1, 2, 3, 4, 5},
		{9, 1, 2, 3, 4, 5, 6, 7, 8},
	},
	Grid{ // four solutions
		{0, 0, 0, 0, 9, 0, 0, 0, 0},
		{6, 0, 0, 4, 0, 7, 0, 0, 8},
		{0, 4, 0, 8, 1, 2, 0, 3, 0},
		{7, 0, 0, 0, 0, 0, 0, 0, 5},
		{0, 0, 4, 0, 0, 0, 9, 0, 0},
		{5, 0, 0, 3, 7, 1, 0, 0, 4},
		{0, 5, 0, 0, 6, 0, 0, 4, 0},
		{2, 0, 1, 7, 0, 8, 5, 0, 9},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	Grid{ // ten solutions
		{5, 9, 0, 0, 0, 0, 0, 4, 8},
		{6, 0, 8, 0, 0, 0, 3, 0, 7},
		{0, 0, 0, 2, 0, 1, 0, 0, 0},
		{0, 0, 0, 0, 4, 0, 0, 0, 0},
		{0, 7, 5, 3, 0, 6, 9, 8, 0},
		{0, 0, 0, 0, 9, 0, 0, 0, 0},
		{0, 0, 0, 8, 0, 3, 0, 0, 0},
		{2, 0, 6, 0, 0, 0, 7, 0, 9},
		{3, 4, 0, 0, 0, 0, 0, 6, 5},
	},
	Grid{ // 125 solutions
		{0, 0, 0, 3, 1, 6, 5, 0, 0},
		{8, 0, 0, 5, 0, 0, 1, 0, 0},
		{0, 1, 0, 8, 9, 7, 2, 4, 0},
		{9, 0, 1, 0, 8, 5, 0, 2, 0},
		{0, 0, 0, 9, 0, 1, 0, 0, 0},
		{0, 4, 0, 2, 6, 3, 0, 0, 1},
		{0, 5, 0, 0, 0, 0, 0, 1, 0},
		{1, 0, 0, 4, 0, 9, 0, 0, 2},
		{0, 0, 6, 1, 0, 8, 0, 0, 0},
	},
	Grid{ // 606 sextillion solutions
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
}

var puzzles = []Grid{
	Grid{ // Sudoku Free easy
		{0, 1, 5, 0, 0, 0, 9, 8, 0},
		{0, 0, 0, 2, 0, 8, 0, 0, 0},
		{8, 4, 0, 0, 0, 0, 0, 3, 5},
		{0, 0, 1, 4, 0, 5, 8, 0, 0},
		{0, 2, 0, 7, 0, 9, 0, 6, 0},
		{0, 0, 3, 8, 0, 1, 2, 0, 0},
		{2, 5, 0, 0, 0, 0, 0, 7, 4},
		{0, 0, 0, 6, 0, 2, 0, 0, 0},
		{0, 3, 7, 0, 0, 0, 6, 2, 0},
	},
	Grid{ // Sudoku Free extreme
		{0, 0, 0, 0, 0, 0, 5, 2, 0},
		{2, 6, 0, 0, 0, 0, 0, 0, 4},
		{5, 0, 0, 0, 0, 6, 0, 9, 7},
		{0, 0, 8, 0, 3, 9, 0, 6, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 3, 0, 4, 8, 0, 2, 0, 0},
		{6, 2, 0, 3, 0, 0, 0, 0, 8},
		{1, 0, 0, 0, 0, 0, 0, 7, 2},
		{0, 9, 5, 0, 0, 0, 0, 0, 0},
	},
	Grid{ // Stuart moderate
		{4, 0, 0, 0, 1, 0, 0, 0, 0},
		{0, 0, 0, 3, 0, 9, 0, 4, 0},
		{0, 7, 0, 0, 0, 5, 0, 0, 9},
		{0, 0, 0, 0, 6, 0, 0, 2, 1},
		{0, 0, 4, 0, 7, 0, 6, 0, 0},
		{1, 9, 0, 0, 5, 0, 0, 0, 0},
		{9, 0, 0, 4, 0, 0, 0, 7, 0},
		{0, 3, 0, 6, 0, 8, 0, 0, 0},
		{0, 0, 0, 0, 3, 0, 0, 0, 6},
	},
	Grid{ // Stuart tough
		{3, 0, 9, 0, 0, 0, 4, 0, 0},
		{2, 0, 0, 7, 0, 9, 0, 0, 0},
		{0, 8, 7, 0, 0, 0, 0, 0, 0},
		{7, 5, 0, 0, 6, 0, 2, 3, 0},
		{6, 0, 0, 9, 0, 4, 0, 0, 8},
		{0, 2, 8, 0, 5, 0, 0, 4, 1},
		{0, 0, 0, 0, 0, 0, 5, 9, 0},
		{0, 0, 0, 1, 0, 6, 0, 0, 7},
		{0, 0, 6, 0, 0, 0, 1, 0, 4},
	},
	Grid{ // Stuart diabolical
		{0, 0, 0, 7, 0, 4, 0, 0, 5},
		{0, 2, 0, 0, 1, 0, 0, 7, 0},
		{0, 0, 0, 0, 8, 0, 0, 0, 2},
		{0, 9, 0, 0, 0, 6, 2, 5, 0},
		{6, 0, 0, 0, 7, 0, 0, 0, 8},
		{0, 5, 3, 2, 0, 0, 0, 1, 0},
		{4, 0, 0, 0, 9, 0, 0, 0, 0},
		{0, 3, 0, 0, 6, 0, 0, 9, 0},
		{2, 0, 0, 4, 0, 7, 0, 0, 0},
	},
	Grid{ // Arto Inkala
		{8, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 3, 6, 0, 0, 0, 0, 0},
		{0, 7, 0, 0, 9, 0, 2, 0, 0},
		{0, 5, 0, 0, 0, 7, 0, 0, 0},
		{0, 0, 0, 0, 4, 5, 7, 0, 0},
		{0, 0, 0, 1, 0, 0, 0, 3, 0},
		{0, 0, 1, 0, 0, 0, 0, 6, 8},
		{0, 0, 8, 5, 0, 0, 0, 1, 0},
		{0, 9, 0, 0, 0, 0, 4, 0, 0},
	},
}
