//  gochallenge2 - Solution for 2nd go challenge
//
//  Written in 2015 by Matthieu Rakotojaona - matthieu.rakotojaona@gmail.com
//
//  To the extent possible under law, the author(s) have dedicated all
//  copyright and related and neighboring rights to this software to the
//  public domain worldwide. This software is distributed without any
//  warranty.
//
//  You should have received a copy of the CC0 Public Domain Dedication
//  along with this software. If not, see
//  <http://creativecommons.org/publicdomain/zero/1.0/>.

package main

import (
	"bufio"
	"crypto/rand"
	"flag"
	"fmt"
	"io"
	"log"
	"net"
	"os"

	"code.google.com/p/go.crypto/nacl/box"
)

// This is the protocol used by client and server to establish a
// "secure" communication:
//
// - Clients opens a TCP socket to server
// - Each side sends its public key
// - Each side registers the other side's public key, installs a session
// - length-prefixed messages are exchanged back and forth.
//
// Here is the format of an encrypted message:
// <length><nonce><poly1305-tag><payload>
//
// where
//   - length is a 2 byte big endian int denoting the length
//     of the rest of the message
//   - nonce is a 24 byte random value generated by the sender
//   - poly1305 tag is the 16 byte signature of payload
//   - payload is the message encrypted with XSalsa20, as per
//     nacl/secretbox
//
// We consider payloads to be <= 32kiB, when we add poly tag and
// nonce 2 bytes are more than enough for the length

type secureConn struct {
	io.Reader
	io.Writer
}

func (sc secureConn) Close() error {
	if v, ok := sc.Reader.(io.Closer); ok {
		v.Close()
	}
	if v, ok := sc.Writer.(io.Closer); ok {
		v.Close()
	}
	return nil
}

// Dial generates a private/public key pair,
// connects to the server, perform the handshake
// and return a reader/writer.
func Dial(addr string) (io.ReadWriteCloser, error) {
	conn, err := net.Dial("tcp", addr)
	if err != nil {
		return nil, err
	}

	myPub, myPriv, err := box.GenerateKey(rand.Reader)
	if err != nil {
		log.Fatal(err)
	}

	conn.Write((*myPub)[:])

	var theirPub [32]byte
	conn.Read(theirPub[:])

	reader := NewSecureReader(conn, myPriv, &theirPub)
	writer := NewSecureWriter(conn, myPriv, &theirPub)

	return secureConn{reader, writer}, nil
}

func handle(myPub, myPriv *[32]byte, conn net.Conn) {
	defer conn.Close()

	_, err := conn.Write(myPub[:])
	if err != nil {
		log.Println(err)
		return
	}

	var theirPub [32]byte
	_, err = conn.Read(theirPub[:])
	if err != nil {
		log.Println(err)
		return
	}

	fmt.Printf("New client: %s\n", conn.RemoteAddr())

	reader := NewSecureReader(conn, myPriv, &theirPub)
	writer := NewSecureWriter(conn, myPriv, &theirPub)

	// This buf is used for passing messages from reader to writer
	buf := make([]byte, 33*1024)
	for {
		// This is an echo server: we read content from the socket, and
		// copy it back to the same socket.

		n, err := reader.Read(buf[0:])
		if err != nil {
			if err == io.EOF {
				break
			}
			log.Println(err)
			break
		}
		n2, err := writer.Write(buf[:n])
		if err != nil {
			log.Println(err)
			break
		}
		if n2 != n {
			log.Println("Invalid write length")
			break
		}
	}

	fmt.Printf("Client disconnected: %s\n", conn.RemoteAddr())
}

// Serve starts a secure echo server on the given listener.
func Serve(l net.Listener) error {
	myPub, myPriv, err := box.GenerateKey(rand.Reader)
	if err != nil {
		return err
	}

	for {
		conn, err := l.Accept()
		if err != nil {
			return err
		}

		go handle(myPub, myPriv, conn)
	}

	return nil
}

func main() {
	port := flag.Int("l", 0, "Listen mode. Specify port")
	flag.Parse()

	// Server mode
	if *port != 0 {
		l, err := net.Listen("tcp", fmt.Sprintf(":%d", *port))
		if err != nil {
			log.Fatal(err)
		}
		defer l.Close()
		fmt.Printf("Now listening on %d\n\n", *port)
		log.Fatal(Serve(l))
	}

	// Client mode
	if len(os.Args) != 2 {
		log.Fatalf("Usage: %s <port>", os.Args[0])
	}
	conn, err := Dial("localhost:" + os.Args[1])
	if err != nil {
		log.Fatal(err)
	}
	defer conn.Close()

	userInput := bufio.NewScanner(os.Stdin)

	fmt.Println("You can now send (encrypted) messages to the server. Hit Ctrl-D to exit prompt.\n")

	for {
		fmt.Printf("> ")

		// Read input until newline and send it
		if !userInput.Scan() {
			return
		}
		message := userInput.Bytes()
		if _, err := conn.Write(message); err != nil {
			log.Fatal(err)
		}

		// Print response and newline
		// We know we will receive an echo of the message, so we copy
		// exactly the length of the input message
		_, err := io.CopyN(os.Stdout, conn, int64(len(message)))
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println("")
	}
}
